{"version":3,"sources":["components/wether/weathercard.js","components/wether/temp.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","tempInfo","React","useState","weatherState","setWeatherState","temp","humidity","pressure","weathermood","name","speed","country","sunset","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","setTempInfo","getWeatherInfo","a","url","process","fetch","res","PORT","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d40069aa.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst Weathercard = ({ tempInfo }) => {\r\n    const [weatherState, setWeatherState] = React.useState(\"\");\r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n    } = tempInfo;\r\n\r\n    useEffect(() => {\r\n        if (weathermood) {\r\n            switch (weathermood) {\r\n                case \"Clouds\":\r\n                    setWeatherState(\"wi-day-cloudy\");\r\n                    break;\r\n                case \"Haze\":\r\n                    setWeatherState(\"wi-fog\");\r\n                    break;\r\n                case \"Clear\":\r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n                    case \"Mist\":\r\n                        setWeatherState(\"wi-dust\");\r\n                        break;\r\n                default:\r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n\r\n            }\r\n        }\r\n    }, [weathermood])\r\n\r\n\r\n\r\n    let sec = sunset;\r\n    let date = new Date(sec * 1000);\r\n    let timeStr = `${date.getHours()}: ${date.getMinutes()}`;\r\n\r\n    return (\r\n        <>\r\n            <article className=\"widget \">\r\n                <div className=\"weatherIcon\">\r\n                    <i className={`wi ${weatherState}`}></i>\r\n                </div>\r\n                <div className=\"weatherInfo \">\r\n                    <div className=\"temperature\">\r\n                        <span>{temp}&deg;</span>\r\n                    </div>\r\n                    <div className=\"description\">\r\n                        <div className=\"weatherCondition\">\r\n                           {weathermood}\r\n                        </div>\r\n                        <div className=\"place\">\r\n                            {name},{country}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"date\">{new Date().toLocaleString()}</div>\r\n                <div className=\"extra-temp\">\r\n                    <div className=\"temp-info-minmax\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-sunset\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {timeStr}PM<br />\r\n                                sunset\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-humidity\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {humidity}<br />\r\n                                humidity\r\n                            </p>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"weather-extra-info\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-rain\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {pressure}<br />\r\n                                pressure\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-strong-wind\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {speed}<br />\r\n                                speed\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weathercard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Weathercard from './weathercard';\r\n\r\n\r\n\r\nconst Temp = () => {\r\n   \r\n    const [searchValue, setSearchValue] = useState(\"cuttack\");\r\n    const[tempInfo,setTempInfo]=useState({});\r\n    const getWeatherInfo = async () => {\r\n        try {\r\n            let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=${process.env.REACT_APP_UNSPLASE_KEY}`;\r\n            const res = await fetch(url);\r\n            const PORT = process.env.PORT;\r\n            const data = await res.json();\r\n\r\n            const { temp, humidity, pressure } = data.main;\r\n            const { main: weathermood } = data.weather[0];\r\n            const { name } = data;\r\n            const { speed } = data.wind;\r\n            const { country, sunset } = data.sys;\r\n            const myNewWeatherInfo={\r\n                temp,\r\n                humidity,\r\n                pressure,\r\n                weathermood,\r\n                name,\r\n                speed,\r\n                country,\r\n                sunset,\r\n            };\r\n            setTempInfo(myNewWeatherInfo);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getWeatherInfo();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrap\">\r\n                <div className=\"search\">\r\n                    <input type=\"search\"\r\n                        placeholder=\"search!!!\"\r\n                        autoFocus\r\n                        id=\"search\"\r\n                        className=\"searchTerm\"\r\n                        value={searchValue}\r\n                        onChange={(e) => setSearchValue(e.target.value)}\r\n                    />\r\n                    <button className=\"searchButton\" type=\"button\" onClick={getWeatherInfo}>\r\n                        Search\r\n                    </button>\r\n                    \r\n\r\n                </div>\r\n            </div>\r\n\r\n            <Weathercard tempInfo={tempInfo}/>\r\n\r\n         \r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temp;\r\n","\nimport './App.css';\n\nimport Temp from './components/wether/temp';\n\nfunction App() {\n  return (\n    <>\n    <Temp/>\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}